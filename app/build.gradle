plugins {
    id 'com.android.application'
}

android {
    namespace 'bin.mt.test'
    compileSdk 35
    ndkVersion '27.2.12479018'

    defaultConfig {
        applicationId "bin.mt.signature"
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "3.5.0"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                abiFilters = ["armeabi-v7a", "x86", "arm64-v8a", "x86_64"]
            }
        }

        ndk {
            abiFilters = ["armeabi-v7a", "x86", "arm64-v8a", "x86_64"]
        }
    }

    signingConfigs {
        debug {
            storeFile file("../fake.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    def customAPKNamePrefix = "BGMI"
    def architecture = "arm64-v8a"
    def validArchitectures = ["armeabi-v7a", "x86", "arm64-v8a", "x86_64"]

    if (!validArchitectures.contains(architecture)) {
        throw new GradleException("Invalid architecture specified: ${architecture}. Valid options: ${validArchitectures.join(', ')}.")
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apkName = "${customAPKNamePrefix}-${variant.buildType.name}-${variant.versionName}-${architecture}.apk"
            output.outputFileName = apkName
        }
    }
}

dependencies {
    implementation project(path: ':killer')
}
