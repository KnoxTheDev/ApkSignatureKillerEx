plugins {
    id 'com.android.application'
}

android {
    namespace 'bin.mt.test'
    compileSdk 35
    ndkVersion '27.1.12297006'

    defaultConfig {
        applicationId "bin.mt.signature"
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "3.5.0"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                abiFilters = ["armeabi-v7a", "x86", "arm64-v8a", "x86_64"]
            }
        }
        ndk {
            abiFilters = ["armeabi-v7a", "x86", "arm64-v8a", "x86_64"]
        }
    }

    signingConfigs {
        debug {
            storeFile file("../fake.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    // Define a variable for customizing the APK base name
    def customAPKNamePrefix = "BGMI"  // You can change this to any name you like

    // Define the architecture manually
    def architecture = "armeabi-v7a"  // This value can be manually set to one of: "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    
    // List of valid architecture options
    def validArchitectures = ["armeabi-v7a", "x86", "arm64-v8a", "x86_64"]

    // Validate the architecture input
    if (!validArchitectures.contains(architecture)) {
        throw new GradleException("Invalid architecture specified: ${architecture}. Valid options are: ${validArchitectures.join(', ')}.")
    }

    // Customize the output APK name based on the build type (debug, release, etc.) and architecture
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apkName = "${customAPKNamePrefix}-${variant.buildType.name}-${variant.versionName}-${architecture}.apk"
            output.outputFileName = apkName
        }
    }
}

dependencies {
    implementation project(path: ':killer')
}
